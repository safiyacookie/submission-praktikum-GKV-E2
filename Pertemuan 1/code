#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>

// Fungsi untuk menggambar kubus
void drawCube(float x, float y, float z) {
    glPushMatrix();
    glTranslatef(x, y, z);
    glBegin(GL_QUADS);

    // Depan
    glColor3f(1.0, 0.0, 0.0);
    glVertex3f(-0.2, -0.2, 0.2);
    glVertex3f(0.2, -0.2, 0.2);
    glVertex3f(0.2, 0.2, 0.2);
    glVertex3f(-0.2, 0.2, 0.2);

    // Belakang
    glColor3f(0.0, 1.0, 0.0);
    glVertex3f(-0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, -0.2);
    glVertex3f(0.2, 0.2, -0.2);
    glVertex3f(-0.2, 0.2, -0.2);

    // Kiri
    glColor3f(0.0, 0.0, 1.0);
    glVertex3f(-0.2, -0.2, -0.2);
    glVertex3f(-0.2, -0.2, 0.2);
    glVertex3f(-0.2, 0.2, 0.2);
    glVertex3f(-0.2, 0.2, -0.2);

    // Kanan
    glColor3f(1.0, 1.0, 0.0);
    glVertex3f(0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, 0.2);
    glVertex3f(0.2, 0.2, 0.2);
    glVertex3f(0.2, 0.2, -0.2);

    // Atas
    glColor3f(1.0, 0.0, 1.0);
    glVertex3f(-0.2, 0.2, -0.2);
    glVertex3f(0.2, 0.2, -0.2);
    glVertex3f(0.2, 0.2, 0.2);
    glVertex3f(-0.2, 0.2, 0.2);

    // Bawah
    glColor3f(0.0, 1.0, 1.0);
    glVertex3f(-0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, -0.2);
    glVertex3f(0.2, -0.2, 0.2);
    glVertex3f(-0.2, -0.2, 0.2);

    glEnd();
    glPopMatrix();
}

// Fungsi untuk menggambar piramida kubus 3D
void display3D() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    gluLookAt(0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    // Baris bawah (3 kubus)
    drawCube(-0.5, -0.3, 0.0);
    drawCube(0.0, -0.3, 0.0);
    drawCube(0.5, -0.3, 0.0);

    // Baris tengah (2 kubus)
    drawCube(-0.25, 0.0, 0.0);
    drawCube(0.25, 0.0, 0.0);

    // Puncak piramida (1 kubus)
    drawCube(0.0, 0.3, 0.0);

    glutSwapBuffers();
}

// Fungsi untuk menggambar bentuk 2D
void display2D() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    // Menggambar titik di kiri atas
    glColor3f(1.0, 0.0, 0.0);
    glPointSize(5.0);
    glBegin(GL_POINTS);
    glVertex2f(-0.9, 0.9);
    glEnd();

    // Menggambar garis dari kiri atas ke kanan
    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_LINES);
    glVertex2f(-0.9, 0.7);
    glVertex2f(0.9, 0.7);
    glEnd();

    // GL_LINE_STRIP
    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_LINE_STRIP);
    glVertex2f(-0.8, 0.5);
    glVertex2f(-0.6, 0.5);
    glVertex2f(-0.7, 0.3);
    glEnd();

    // GL_LINE_LOOP
    glColor3f(1.0, 1.0, 0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-0.4, 0.5);
    glVertex2f(-0.2, 0.5);
    glVertex2f(-0.3, 0.3);
    glEnd();

    // GL_TRIANGLE_FAN
    glColor3f(1.0, 0.5, 0.0);
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0.0, 0.4);
    glVertex2f(0.1, 0.6);
    glVertex2f(0.2, 0.5);
    glVertex2f(0.2, 0.3);
    glVertex2f(0.1, 0.2);
    glEnd();

    // GL_TRIANGLE_STRIP
    glColor3f(0.5, 0.0, 0.5);
    glBegin(GL_TRIANGLE_STRIP);
    glVertex2f(0.3, 0.3);
    glVertex2f(0.4, 0.5);
    glVertex2f(0.5, 0.3);
    glVertex2f(0.6, 0.5);
    glEnd();

    // GL_QUADS
    glColor3f(0.0, 1.0, 1.0);
    glBegin(GL_QUADS);
    glVertex2f(-0.8, -0.2);
    glVertex2f(-0.6, -0.2);
    glVertex2f(-0.6, -0.4);
    glVertex2f(-0.8, -0.4);
    glEnd();

    // GL_QUAD_STRIP
    glColor3f(1.0, 0.0, 1.0);
    glBegin(GL_QUAD_STRIP);
    glVertex2f(-0.4, -0.2);
    glVertex2f(-0.2, -0.2);
    glVertex2f(-0.4, -0.4);
    glVertex2f(-0.2, -0.4);
    glEnd();

    glutSwapBuffers();
}

// Inisialisasi untuk tampilan 3D
void init3D() {
    glEnable(GL_DEPTH_TEST);
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, 1.0, 0.1, 10.0);
    glMatrixMode(GL_MODELVIEW);
}

// Inisialisasi untuk tampilan 2D
void init2D() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
}

// Fungsi utama
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

    // Membuat jendela 2D
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    int window2D = glutCreateWindow("2D Shapes");
    glLoadIdentity();
    init2D();
    glutDisplayFunc(display2D);
    glutPostRedisplay();

    // Membuat jendela 3D
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(650, 100);
    int window3D = glutCreateWindow("3D Pyramid of Cubes");
    glLoadIdentity();
    init3D();
    glutDisplayFunc(display3D);
    glutPostRedisplay();

    glutMainLoop();
    return 0;
}
